PZ3
ggsave( "results/Sankey_Betweenprovince.png",height=4,width=5,units="in")
mat<-table(can.can$tip.state,can.can$par.state)
#melt long
mat2<-mat %>% melt()
colnames(mat2)<-c("Recipient","Source","value")
#add empty rows for Newf as source
empty<-data.frame(mat2[1:8,])
empty$Source<-"Newfoundland\nand Labrador"
empty$value<-0
mat3<-rbind(mat2,empty)
#remove within-provinces
rem<-c()
for (i in 1:nrow(mat3)){
if(mat3$Source[i]==mat3$Recipient[i]){rem<-c(rem,i)}
}
length(rem)
mat4<-mat3[-rem,]
#order Var1 and Var2
mat4$Recipient<-factor(mat4$Recipient, levels = provs)
mat4$Source<-factor(mat4$Source, levels = provs)
#Calculate sums
mat4
## plot as a heatmap
#example
# mat<-table(cana.boots[[k]]$state, cana.boots[[k]]$state)
P1<- mat4 %>% ggplot()+
geom_tile(aes(x=Source,y=Recipient,fill=sqrt(value)))+
labs(x="Source",y="Recipient",fill="Between-\nprovince\ntransmission\nevents")+
theme(axis.text.x=element_text(angle=45,hjust=1))+
scale_fill_viridis(discrete="F", breaks = seq(1:7),
labels = (seq(1:7))^2, limits=c(0.0001,7.5))+
# guides(fill=guide_legend(values=seq(0,1.5,0.5),labels=2^(seq(0,1.5,0.5))))+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background=element_rect("grey95"),
text=element_text(size=10,face="bold"),
legend.text=element_text(size=6))
P1
#Calculate sums
mat4
#order Var1 and Var2
mat4$Recipient<-factor(mat4$Recipient, levels = provs)
mat4<-mat3[-rem,]
mat3<-rbind(mat2,empty)
#melt long
mat2<-mat %>% melt()
#melt long
mat2<-mat %>% pivot_longer()
#melt long
mat2<-mat %>% as.data.frame() %>%pivot_longer()
#what percent of singletons came from the top sources
top.sources<-names(rev(sort(table(can.sing.boots[[1]]$par.state))))
for (i in 1:length(top.sources)){
source<-c()
for (k in 1:b){
perc<- signif(length(which(can.sing.boots[[k]]$par.state==top.sources[i]))/
nrow(can.sing.boots[[k]])*100, digits = 3)
source<-c(source, perc)
}
print(top.sources[i])
mean.95ci.1(source)
}
#what percent of singletons came from the top sources
top.sources<-names(rev(sort(table(sum.boots[[1]]$Parent.Location))))
for (i in 1:length(top.sources)){
source<-c()
for (k in 1:b){
perc<- signif(length(which(sum.boots[[k]]$Parent.Location==top.sources[i]))/
nrow(sum.boots[[k]])*100, digits = 3)
source<-c(source, perc)
}
print(top.sources[i])
mean.95ci.1(source)
}
# Sublineges with 20+ Desc
## Find sublineage to focus on with more than 20 descendants
sublinLast<-sublin.long2 %>% group_by(Sublineage) %>% summarize(.groups="rowwise",lastDate=first(rev(sort(DatesLSD))), n=n()) %>% as.data.frame()
focus.sublins<-sublinLast[sublinLast$n>20,]
## Look at samps over time just for the focus sublins
sublin.long2 %>% filter(Sublineage %in% focus.sublins$Sublineage) %>%
ggplot(aes(y=Sublineage,color=Lineage))+
geom_linerangeh(aes(xmin=DateMin,xmax=DateMax),lwd=0.3)+
geom_linerangeh(aes(xmin=tmrca,xmax=FirstCan),linetype="dotted",lwd=0.3)+ #detection lag
geom_point(aes(x=DatesLSD),alpha=0.7,size=0.5)+
geom_point(aes(x=FirstCan),shape=22,size=0.7)+
geom_point(aes(x=tmrca),shape=18,size=1)+
theme_bw()+
theme(axis.text.y=element_blank(), axis.ticks.y=element_blank(),
axis.text.x=element_text(angle=45,hjust = 1),
panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background=element_rect("grey95"),
legend.key.size = unit(0.5,"line"),
text=element_text(size=10,face="bold"),
legend.text=element_text(size=8),
legend.position="none")+
scale_x_date(date_breaks = "1 month", date_minor_breaks = "2 weeks", date_labels = "%b %Y",
limits=c(as.Date("2020-01-01"),as.Date("2021-04-01")))+
labs(x=NULL,y="Sublineages with >=20 sampled desc.")+
colScale+
scale_y_discrete(expand = c(0.05,0.05))+
guides(color=guide_legend(title="Province of Introduction",title.position = "top",ncol=4))+
geom_text(aes(label=Sublineage,x=as.Date("2021-02-10",y=Sublineage)),vjust=0.5,hjust=0,size=2,color="grey40")
#ggsave("results/SamplesOverTimeFor_FOCUS_Sublineages_lincolor.png",height=7,width=5,units="in")
## Repeat colored by province of intro
sublin.long2 %>% filter(Sublineage %in% focus.sublins$Sublineage) %>%
ggplot(aes(y=Sublineage,color=Node.Location))+
geom_linerangeh(aes(xmin=DateMin,xmax=DateMax),lwd=0.3)+
geom_linerangeh(aes(xmin=tmrca,xmax=FirstCan),linetype="dotted",lwd=0.3)+ #detection lag
geom_point(aes(x=DatesLSD),alpha=0.7,size=0.5)+
geom_point(aes(x=FirstCan),shape=22,size=0.7)+
geom_point(aes(x=tmrca),shape=18,size=1)+
theme_bw()+
theme(axis.text.y=element_blank(), axis.ticks.y=element_blank(),
axis.text.x=element_text(angle=45,hjust = 1),
panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background=element_rect("grey95"),
legend.key.size = unit(0.5,"line"),
text=element_text(size=10,face="bold"),
legend.text=element_text(size=8),
legend.position="none")+
scale_x_date(date_breaks = "1 month", date_minor_breaks = "2 weeks", date_labels = "%b %Y",
limits=c(as.Date("2020-01-01"),as.Date("2021-04-01")))+
labs(x=NULL,y="Sublineages with >=20 sampled desc.")+
GlobColScale+
scale_y_discrete(expand = c(0.05,0.05))+
guides(color=guide_legend(title="Province of Introduction",title.position = "top",ncol=1))+
geom_text(aes(label=Sublineage,x=as.Date("2021-02-10",y=Sublineage)),vjust=0.5,hjust=0,size=2,color="grey40")
#ggsave("results/SamplesOverTimeFor_FOCUS_Sublineages_Provcolor.png",height=7,width=5,units="in")
## upper limits of introductions
seq.case<-9657/866487
sing.tot<-c()
for (k in 1:b){
sing.tot<-c(sing.tot,nrow(can.sing.boots[[k]] ))
}
mean.95ci.X(sing.tot,0) #1342 (1311 - 1374)"
sublin.tot<-c()
for (k in 1:b){
sublin.tot<-c(sublin.tot,nrow(sum.boots[[k]]))
}
mean.95ci.X(sublin.tot,0) #"411 (402 - 420)"
(1342 + 411 )* 1/seq.case
(1311 + 402 )* 1/seq.case
(1374 + 420 )* 1/seq.case
#upper estimate of introductions
# 157,290 (153,701 - 160,969)
## Look at whether the country of exposure is consistent with the parental origins of sublineage
k=8
allmet<-read.csv(clean.meta)
canmet<-allmet[which(allmet$country=="Canada"),]
nrow(canmet)
table(canmet$country_exposure)
cantravel<-canmet[which(canmet$country_exposure != "Canada"),]
#which canadians with travel history were a descendant of a sublineage
travdesc<-cantravel[which(cantravel$gisaid_epi_isl %in% sublin.long[[k]]$Descendant.AccessionIDs),]
travdesc$inferredParent<-NA
travdesc$sublineage2<-NA
for (i in 1:nrow(travdesc)){
matchy<-which(sublin.long[[k]]$Descendant.AccessionIDs== travdesc$gisaid_epi_isl[i])
travdesc$sublineage2[i]<-sublin.long[[k]]$Sublineage2[matchy]
travdesc$inferredParent[i]<-sum.boots[[k]]$Parent.Location[which(sum.boots[[k]]$Sublineage2==sublin.long[[k]]$Sublineage2[matchy])]
}
travdesc$inferredParent
travdesc$country_exposure
travdesc$sublineage2
#100% agreement
#what about the singletons?
tree.in<-"../02_trees/ft_root_res_time/res_rooted_subsamp_align_fake150_9.fasta.timetree.nex.binary.tre"
#!/usr/bin/env Rscript
# Make timetree figure for the highest likelihood tree of the bootstrap set
#usage:
# $Rscript PlotTreeFigure.R
#### Inputs and outputs ####
# args<-commandArgs(trailingOnly=TRUE)
#setup libs
library(ape)
library(ggplot2)
library(ggtree)
library(RColorBrewer)
library(lubridate)
library(stringr)
library(phangorn)
library(stringr)
## inputs and outputs
#color schemes
colors.in<-"../03_stateReconstruction/DF/globalcolors.tsv"
lin.colors.in<-"../03_stateReconstruction/DF/lineagecolors.tsv"
lin.grp.colors.in<-"../03_stateReconstruction/DF/lineageGroupColors.tsv"
#lineage lookup table
lin.lookup.in<-"../03_stateReconstruction/DF/lineageGroups.csv"
#bootstrap setup
boot<-"b9"
tree.in<-"../02_trees/ft_root_res_time/res_rooted_subsamp_align_fake150_9.fasta.timetree.nex.binary.tre"
meta.in<-"../03_stateReconstruction/DF/meta.b9.csv"
#overall across bootstraps
#most recent sampling date
mrsd="2021-02-04"
#tmrca
tmrca<-"2019-12-08"
tmrca.dt<-format(as.Date(tmrca),"%d %b %Y")
tmrca.dt.up<-format(as.Date("2019-10-28"),"%d %b %Y")
tmrca.dt.low<-format(as.Date("2019-12-09"),"%d %b %Y")
#set up directory if doesn't exist
fold.out<-"results/"
if(!dir.exists(fold.out)){dir.create(fold.out)}
## setup province colors
#import a tsv of name and hex color
globalPalette<-read.table(colors.in,sep="\t")
## make color scheme for Lineages
glob.colz<-row.names(globalPalette)
globalPalette.ch<-as.character(globalPalette$globalPalette)
names(globalPalette.ch)<-glob.colz
provPalette<-globalPalette.ch[str_which(names(globalPalette.ch),"Alberta|British Columbia|Manitoba|Maritimes|Ontario|Quebec") ]
#Prince Edward Island|Yukon|Northwest Territories|Nunavut
colScale<-scale_colour_manual(name = "Canadian\nprovince",values = provPalette)
fillScale<-scale_fill_manual(name = "Canadian\nprovince",values = provPalette)
## Read in tree and data
#binarized newick tree (from multifurcating nexus)
tn<-read.tree(tree.in)
# tn<-ladderize(tn,right=F)
#import appropriate metadata
meta<-read.csv(meta.in,header=T)
#remove any tips not found in the tree
meta<-meta[which(meta$tip.label %in% tn$tip.label), ]
nrow(meta)==Ntip(tn)
#sort to match tree
meta<-meta[match(tn$tip.label,meta$tip.label),]
#convert martimes provinces
meta$division<-str_replace_all(meta$division, "Nova Scotia|New Brunswick|Newfoundland and Labrador|Newfoundland\nand Labrador","Maritimes")
#only keep cols you want to use as features in tree and tip labels
t.df<-meta[,c("new.names","country","division")]
colnames(t.df)<-c("tip.label","country","division")
#make a column for canada yes or no
t.df$canada<-0
t.df$province<-NA
for (i in 1:nrow(t.df)){
if (t.df$country[i]=="Canada") {t.df$canada[i]<-1; t.df$province[i]<-t.df$division[i] }
}
# table(t.df$canada)
table(as.factor(t.df2$province))
## Basic trees
##  baseplot}
#Plot the timetree, plain
p1<-ggtree(tn,mrsd=mrsd, as.Date=TRUE, aes(na.rm=T,color="state"),lwd=0.05,color="grey70")+
theme_tree2() +#add scale bar on x axis
theme(axis.text=element_text(size=18))
# p1
# ggsave("timeTreePlots/0211_timetree.png",width=9, height=10, units = "in")
## build up detail for time tree
#make dataframe for single point in annotation
point<-data.frame(x=as.Date("2019-12-16"), y=50) #y=7050
## timetree root date annotate
p2<-p1+
geom_rootpoint(color="darkolivegreen", size=4, shape=18,alpha=0.9)+
annotate("text", as.Date("2019-11-15"), y=40, hjust=0, size=3, label=paste("tMRCA\n",tmrca.dt,"\n(",tmrca.dt.up," -\n",tmrca.dt.low,")", sep=""),fontface="bold")+ #y=5700
geom_point(data=point, aes(x=x,y=y),color="darkolivegreen", size=4, shape=18,alpha=0.9)
#merge metadata with tree
p3<- p2 %<+% t.df [,c("tip.label","canada","province")]
## color provinces
colScale<-scale_colour_manual(name = "Canadian\nprovince",values = provPalette, labels=names(provPalette), breaks=names(provPalette))
p5<-p3+
geom_tippoint(aes(color=as.factor(province),size=as.factor(canada)), shape=16, na.rm = TRUE,alpha=0.9)+
colScale+
scale_size_manual(values = c(-1,1),guide=FALSE)+
scale_y_continuous(expand=c(0.01,0)) +
scale_x_date(date_breaks = "1 month", date_labels = "%b %Y",
limits=as.Date(c("2019-11-10","2021-02-11")), expand=c(0.01,0))+
theme(axis.text.x=element_text(angle=40,hjust = 1,size=10),
axis.title.x = element_text(size=12),
plot.margin=unit(c(1.5,0,0,0),"cm"),
legend.title = element_text(face="bold"),
legend.text=element_text(size=10),
legend.key.height=unit(.2, "in"),
legend.key.width=unit(.1, "in"),
legend.position=c(0.5,0.99),
legend.direction = "horizontal",
legend.justification = "bottom")+
guides(color=guide_legend(override.aes = list(size=4),ncol=6,title.position="top", title="Province"))+
coord_cartesian(clip="off")
p5
ggsave(paste(fold.out,boot,"_timetree.png",sep=""),width=8, height=10, units = "in")
remove(list=ls())
#setup libs
library(ape)
library(ggplot2)
library(ggtree)
library(RColorBrewer)
library(lubridate)
library(stringr)
library(phangorn)
library(stringr)
colors.in<-"../03_stateReconstruction/DF/globalcolors.tsv"
lin.colors.in<-"../03_stateReconstruction/DF/lineagecolors.tsv"
lin.grp.colors.in<-"../03_stateReconstruction/DF/lineageGroupColors.tsv"
#lineage lookup table
lin.lookup.in<-"../03_stateReconstruction/DF/lineageGroups.csv"
#bootstrap setup
boot<-"b9"
tree.in<-"../02_trees/ft_root_res_time/res_rooted_subsamp_align_fake150_9.fasta.timetree.nex.binary.tre"
meta.in<-"../03_stateReconstruction/DF/meta.b9.csv"
#overall across bootstraps
#most recent sampling date
mrsd="2021-02-04"
tmrca<-"2019-12-08"
tmrca.dt<-format(as.Date(tmrca),"%d %b %Y")
tmrca.dt.up<-format(as.Date("2019-10-28"),"%d %b %Y")
tmrca.dt.low<-format(as.Date("2019-12-09"),"%d %b %Y")
fold.out<-"results/"
if(!dir.exists(fold.out)){dir.create(fold.out)}
## setup province colors
#import a tsv of name and hex color
globalPalette<-read.table(colors.in,sep="\t")
## make color scheme for Lineages
glob.colz<-row.names(globalPalette)
globalPalette.ch<-as.character(globalPalette$globalPalette)
names(globalPalette.ch)<-glob.colz
provPalette<-globalPalette.ch[str_which(names(globalPalette.ch),"Alberta|British Columbia|Manitoba|Maritimes|Ontario|Quebec") ]
#Prince Edward Island|Yukon|Northwest Territories|Nunavut
colScale<-scale_colour_manual(name = "Canadian\nprovince",values = provPalette)
fillScale<-scale_fill_manual(name = "Canadian\nprovince",values = provPalette)
## Read in tree and data
#binarized newick tree (from multifurcating nexus)
tn<-read.tree(tree.in)
# tn<-ladderize(tn,right=F)
#import appropriate metadata
meta<-read.csv(meta.in,header=T)
which(meta$tip.label %in% tn$tip.label)
#remove any tips not found in the tree
meta<-meta[which(meta$tip.label %in% tn$tip.label), ]
nrow(meta)==Ntip(tn)
#sort to match tree
meta<-meta[match(tn$tip.label,meta$tip.label),]
#convert martimes provinces
meta$division<-str_replace_all(meta$division, "Nova Scotia|New Brunswick|Newfoundland and Labrador|Newfoundland\nand Labrador","Maritimes")
#only keep cols you want to use as features in tree and tip labels
t.df<-meta[,c("new.names","country","division")]
colnames(meta)
#only keep cols you want to use as features in tree and tip labels
t.df<-meta[,c("tip.label","country","division")]
colnames(t.df)<-c("tip.label","country","division")
#make a column for canada yes or no
t.df$canada<-0
t.df$province<-NA
for (i in 1:nrow(t.df)){
if (t.df$country[i]=="Canada") {t.df$canada[i]<-1; t.df$province[i]<-t.df$division[i] }
}
# table(t.df$canada)
table(as.factor(t.df2$province))
# table(t.df$canada)
table(as.factor(t.df$province))
p1<-ggtree(tn,mrsd=mrsd, as.Date=TRUE, aes(na.rm=T,color="state"),lwd=0.05,color="grey70")+
theme_tree2() +#add scale bar on x axis
theme(axis.text=element_text(size=18))
-ggtree(tn,mrsd=mrsd, as.Date=TRUE, aes(na.rm=T,color="state"),lwd=0.05,color="grey70")
library(ggtree)
tbn
tn
ggtree(tn,mrsd=mrsd, as.Date=TRUE, aes(na.rm=T,color="state"),lwd=0.05,color="grey70")
tn
ggtree(tn)
install.packages("ggtree")
install.packages("ggtree")
BiocManager::install("ggtree")
library(ggtree)
p1<-ggtree(tn,mrsd=mrsd, as.Date=TRUE, aes(na.rm=T,color="state"),lwd=0.05,color="grey70")+
theme_tree2() +#add scale bar on x axis
theme(axis.text=element_text(size=18))
# Color branches by tip state
t.p2<-t.p %<+% t.df [,c("tip.label","state")]
require(phylobase)
require(dplyr)
library(dplyr)
p1<-ggtree(tn,mrsd=mrsd, as.Date=TRUE, aes(na.rm=T,color="state"),lwd=0.05,color="grey70")+
theme_tree2() +#add scale bar on x axis
theme(axis.text=element_text(size=18))
remove.packages("dplyr")
#issue with new ggtree version that depends on older dplyr
library(devtools)
install_version("devtools", version = "1.0.5", repos = "http://cran.us.r-project.org")
install_version("dplyr", version = "1.0.5", repos = "http://cran.us.r-project.org")
library(dplyr)
p1<-ggtree(tn,mrsd=mrsd, as.Date=TRUE, aes(na.rm=T,color="state"),lwd=0.05,color="grey70")+
theme_tree2() +#add scale bar on x axis
theme(axis.text=element_text(size=18))
#setup libs
library(ape)
library(ggplot2)
library(ggtree)
library(RColorBrewer)
library(lubridate)
library(stringr)
library(phangorn)
library(stringr)
library(phylobase)
library(dplyr)
## inputs and outputs
#color schemes
colors.in<-"../03_stateReconstruction/DF/globalcolors.tsv"
lin.colors.in<-"../03_stateReconstruction/DF/lineagecolors.tsv"
lin.grp.colors.in<-"../03_stateReconstruction/DF/lineageGroupColors.tsv"
#lineage lookup table
lin.lookup.in<-"../03_stateReconstruction/DF/lineageGroups.csv"
#bootstrap setup
boot<-"b9"
tree.in<-"../02_trees/ft_root_res_time/res_rooted_subsamp_align_fake150_9.fasta.timetree.nex.binary.tre"
meta.in<-"../03_stateReconstruction/DF/meta.b9.csv"
#overall across bootstraps
#most recent sampling date
mrsd="2021-02-04"
#tmrca
tmrca<-"2019-12-08"
tmrca.dt<-format(as.Date(tmrca),"%d %b %Y")
tmrca.dt.up<-format(as.Date("2019-10-28"),"%d %b %Y")
tmrca.dt.low<-format(as.Date("2019-12-09"),"%d %b %Y")
#set up directory if doesn't exist
fold.out<-"results/"
if(!dir.exists(fold.out)){dir.create(fold.out)}
## setup province colors
#import a tsv of name and hex color
globalPalette<-read.table(colors.in,sep="\t")
## make color scheme for Lineages
glob.colz<-row.names(globalPalette)
globalPalette.ch<-as.character(globalPalette$globalPalette)
names(globalPalette.ch)<-glob.colz
provPalette<-globalPalette.ch[str_which(names(globalPalette.ch),"Alberta|British Columbia|Manitoba|Maritimes|Ontario|Quebec") ]
#Prince Edward Island|Yukon|Northwest Territories|Nunavut
colScale<-scale_colour_manual(name = "Canadian\nprovince",values = provPalette)
fillScale<-scale_fill_manual(name = "Canadian\nprovince",values = provPalette)
## Read in tree and data
#binarized newick tree (from multifurcating nexus)
tn<-read.tree(tree.in)
# tn<-ladderize(tn,right=F)
#import appropriate metadata
meta<-read.csv(meta.in,header=T)
#remove any tips not found in the tree
meta<-meta[which(meta$tip.label %in% tn$tip.label), ]
nrow(meta)==Ntip(tn)
#sort to match tree
meta<-meta[match(tn$tip.label,meta$tip.label),]
#convert martimes provinces
meta$division<-str_replace_all(meta$division, "Nova Scotia|New Brunswick|Newfoundland and Labrador|Newfoundland\nand Labrador","Maritimes")
#only keep cols you want to use as features in tree and tip labels
t.df<-meta[,c("tip.label","country","division")]
colnames(t.df)<-c("tip.label","country","division")
#make a column for canada yes or no
t.df$canada<-0
t.df$province<-NA
for (i in 1:nrow(t.df)){
if (t.df$country[i]=="Canada") {t.df$canada[i]<-1; t.df$province[i]<-t.df$division[i] }
}
# table(t.df$canada)
table(as.factor(t.df$province))
## Basic trees
##  baseplot}
#Plot the timetree, plain
p1<-ggtree(tn,mrsd=mrsd, as.Date=TRUE, aes(na.rm=T,color="state"),lwd=0.05,color="grey70")+
theme_tree2() +#add scale bar on x axis
theme(axis.text=element_text(size=18))
BiocManager::install("ggtree")
BiocManager::install("ggtree")
BiocManager::install("ggtree",force=T)
library(ggtre)
library(ggtree)
p1<-ggtree(tn,mrsd=mrsd, as.Date=TRUE, aes(na.rm=T,color="state"),lwd=0.05,color="grey70")+
theme_tree2() +#add scale bar on x axis
theme(axis.text=element_text(size=18))
BiocManager::install("ggtree",force=T)
p1<-ggtree(tn,mrsd=mrsd, as.Date=TRUE, aes(na.rm=T,color="state"),lwd=0.05,color="grey70")+
theme_tree2() +#add scale bar on x axis
theme(axis.text=element_text(size=18))
library(ggtree)
install.packages("ggtree")
BiocManager::install("ggtree")
BiocManager::install("ggtree",force=T)
p1<-ggtree(tn,mrsd=mrsd, as.Date=TRUE, aes(na.rm=T,color="state"),lwd=0.05,color="grey70")+
theme_tree2() +#add scale bar on x axis
theme(axis.text=element_text(size=18))
library(ggtree)
p1<-ggtree(tn,mrsd=mrsd, as.Date=TRUE, aes(na.rm=T,color="state"),lwd=0.05,color="grey70")+
theme_tree2() +#add scale bar on x axis
theme(axis.text=element_text(size=18))
#make dataframe for single point in annotation
point<-data.frame(x=as.Date("2019-12-16"), y=50) #y=7050
## timetree root date annotate
p2<-p1+
geom_rootpoint(color="darkolivegreen", size=4, shape=18,alpha=0.9)+
annotate("text", as.Date("2019-11-15"), y=40, hjust=0, size=3, label=paste("tMRCA\n",tmrca.dt,"\n(",tmrca.dt.up," -\n",tmrca.dt.low,")", sep=""),fontface="bold")+ #y=5700
geom_point(data=point, aes(x=x,y=y),color="darkolivegreen", size=4, shape=18,alpha=0.9)
#merge metadata with tree
p3<- p2 %<+% t.df [,c("tip.label","canada","province")]
## color provinces
colScale<-scale_colour_manual(name = "Canadian\nprovince",values = provPalette, labels=names(provPalette), breaks=names(provPalette))
p5<-p3+
geom_tippoint(aes(color=as.factor(province),size=as.factor(canada)), shape=16, na.rm = TRUE,alpha=0.9)+
colScale+
scale_size_manual(values = c(-1,1),guide=FALSE)+
scale_y_continuous(expand=c(0.01,0)) +
scale_x_date(date_breaks = "1 month", date_labels = "%b %Y",
limits=as.Date(c("2019-11-10","2021-02-11")), expand=c(0.01,0))+
theme(axis.text.x=element_text(angle=40,hjust = 1,size=10),
axis.title.x = element_text(size=12),
plot.margin=unit(c(1.5,0,0,0),"cm"),
legend.title = element_text(face="bold"),
legend.text=element_text(size=10),
legend.key.height=unit(.2, "in"),
legend.key.width=unit(.1, "in"),
legend.position=c(0.5,0.99),
legend.direction = "horizontal",
legend.justification = "bottom")+
guides(color=guide_legend(override.aes = list(size=4),ncol=6,title.position="top", title="Province"))+
coord_cartesian(clip="off")
p5
ggsave(paste(fold.out,boot,"_timetree.png",sep=""),width=8, height=10, units = "in")
